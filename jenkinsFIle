pipeline {
    agent any
    environment {
        NEXUS_URL = "https://nexus/your-repo-path"
        NEXUS_REPO = "nombre-del-repositorio"
        COMMIT_HASH8 = "abcdef12"
        NEXUS_USER = credentials('nexus-user')
        NEXUS_PASS = credentials('nexus-pass')
    }
    stages {
        stage('Buscar artefacto en Nexus') {
            steps {
                script {
                    def foundUrl = null

                    // Obtener listado de carpetas por fecha
                    def folderListResponse = sh(
                        script: """curl -s -u $NEXUS_USER:$NEXUS_PASS "$NEXUS_URL/$NEXUS_REPO/" """,
                        returnStdout: true
                    )

                    // Extraer fechas con regex
                    def fechas = folderListResponse.readLines().findAll { it =~ /href="(\\d{4}-\\d{2}-\\d{2})\\// }.collect {
                        (it =~ /href="(\\d{4}-\\d{2}-\\d{2})\\//)[0][1]
                    }

                    echo "Fechas encontradas: ${fechas}"

                    // Buscar en cada fecha
                    for (fecha in fechas) {
                        def listado = sh(
                            script: """curl -s -u $NEXUS_USER:$NEXUS_PASS "$NEXUS_URL/$NEXUS_REPO/$fecha/" """,
                            returnStdout: true
                        )

                        def match = listado.readLines().find { it.contains("${COMMIT_HASH8}") }

                        if (match) {
                            def fileName = (match =~ /href="([^"]*${COMMIT_HASH8}[^"]*)"/)[0][1]
                            foundUrl = "$NEXUS_URL/$NEXUS_REPO/$fecha/$fileName"
                            break
                        }
                    }

                    if (foundUrl) {
                        echo "Artefacto encontrado: ${foundUrl}"
                        // Puedes usar el archivo aquí
                    } else {
                        error "No se encontró el artefacto con hash ${COMMIT_HASH8}"
                    }
                }
            }
        }
    }
}
