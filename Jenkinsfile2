void stgUpDateApiKey(def servidoresPorApp, def apiKeys) {

    stage("UpDate ApiKey File") {
        try {
            servidoresPorApp.each { app ->

                if (app.aplicacion.contains("BusinessWorks_HR")) {

                    node(app.hostname) {

                        def fecha = new Date().format("yyyyMMdd")
                        def user = app.user
                        def csvPath = "/tibco/COL_NotificationWhatsapp/ApiKeyAuthorization_AUT0${fecha}.csv"

                        echo "Servidor: ${app.hostname}"
                        echo "Usuario: ${user}"
                        echo "Ruta CSV: ${csvPath}"

                        // Leer archivo remoto
                        def contenido = sh(script: "sudo -u ${user} cat ${csvPath}", returnStdout: true).trim()
                        echo "Primeras líneas del archivo CSV:\n" + contenido.readLines().take(5).join('\n')

                        // Convertir CSV en mapa (PartnerID -> ApiKey)
                        def lineas = contenido.readLines()
                        def encabezado = lineas[0]
                        def registros = [:]

                        lineas.tail().each { linea ->
                            def partes = linea.split(';')
                            if (partes.size() >= 2) {
                                registros[partes[0].trim()] = partes[1].trim()
                            }
                        }

                        // Procesar nuevas claves
                        def entradas = apiKeys.trim().split('\n')
                        entradas.each { entrada ->
                            echo "Procesando entrada: ${entrada}"
                            def partes = entrada.split(';')
                            if (partes.size() >= 2) {
                                def partner = partes[0].trim()
                                def apikey = partes[1].trim()

                                if (registros.containsKey(partner)) {
                                    echo "Actualizando API key para ${partner}"
                                } else {
                                    echo "Agregando nueva API key para ${partner}"
                                }

                                registros[partner] = apikey
                            }
                        }

                        // Limpiar registros nulos o vacíos
                        registros = registros.findAll { k, v ->
                            k && v && k.trim() && v.trim() && k != "null" && v != "null"
                        }

                        // Construir contenido nuevo del CSV
                        def nuevoContenido = ([encabezado] + registros.collect { k, v -> "${k};${v}" })
                            .findAll { it?.trim() }
                            .join('\n')

                        // Guardar archivo temporal
                        def fileName = "ApiKeyAuthorization_AUTO${fecha}.csv"
                        writeFile file: fileName, text: nuevoContenido

                        // Copiar al destino
                        sh "sudo -u ${user} cp ${fileName} ${csvPath}"

                        echo "✅ CSV actualizado correctamente en ${app.hostname}"
                    }
                }
            }

        } catch (e) {
            echo "❌ ERROR: ${e}"
        }
    }
}
