stage("Update ApiKey File") {
    try {
        servidoresPorApp.each { app ->
            if (app.aplicacion.contains("BusinessWorks_HR")) {

                node(app.hostname) {
                    def fecha = new Date().format("yyyyMMdd")
                    def rutaCsv = "/tibco/COL_NotificationWhatsapp/ApiKeyAuthorization_AUT0${fecha}.csv"

                    // Leer CSV actual
                    def contenido = sh(script: "sudo -u ${app.user} cat ${rutaCsv}", returnStdout: true).trim()
                    def lineas = contenido.split("\n")

                    // Crear mapa partnerId -> apiKey
                    def registros = [:]
                    lineas.each { linea ->
                        def partes = linea.split(";")
                        if (partes.size() == 2) {
                            registros[partes[0].trim()] = partes[1].trim()
                        }
                    }

                    echo "üìò CSV original (${registros.size()} registros): ${registros.keySet()}"

                    // --- ENTRADAS NUEVAS ---
                    def entradas = apiKeys?.trim()?.split("\n") ?: []
                    def deletes = delete?.trim()?.split("\n") ?: []   // variable delete opcional

                    // Actualizar o agregar
                    entradas.each { linea ->
                        def partes = linea.split(";")
                        if (partes.size() == 2) {
                            def partner = partes[0].trim()
                            def apiKey = partes[1].trim()
                            registros[partner] = apiKey
                            echo "‚úÖ Agregado/actualizado: ${partner}"
                        }
                    }

                    // Eliminar si delete est√° definido
                    deletes.each { partner ->
                        partner = partner.trim()
                        if (registros.containsKey(partner)) {
                            registros.remove(partner)
                            echo "üóëÔ∏è Eliminado: ${partner}"
                        } else {
                            echo "‚ö†Ô∏è No encontrado para eliminar: ${partner}"
                        }
                    }

                    // Escribir CSV nuevo
                    def nuevoCsv = registros.collect { k, v -> "${k};${v}" }.join("\n")

                    writeFile file: "ApiKeyAuthorization_AUT0${fecha}.csv", text: nuevoCsv
                    sh "sudo mv ApiKeyAuthorization_AUT0${fecha}.csv ${rutaCsv}"

                    echo "‚úÖ Archivo actualizado: ${rutaCsv}"
                    echo "üìó Total final: ${registros.size()} registros"
                }
            }
        }
    } catch (e) {
        echo "‚ùå Error: ${e}"
    }
}
